# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright 2024 SUSE LLC
# SPDX-FileCopyrightText: Copyright 2024 Richard Brown

# Module does not actually do any encryption, but is intended to finish installation of an encrypted image, such as one deployed via systemd-repart
# Module expects to find a single ESP partition (find_esp) and a single LUKS2 partition (find_crypt) on $TIK_INSTALL_DEVICE, upon which it will do the following
#   - Open the encrypted device, mounting var, etc, boot/efi, tmp, run, sys, dev and proc (open_partition)
#   - Against the mounted partition, do the following (finalise_system)
#       - write /etc/crypttab
#       - populate /etc/sysconfig/fde-tools
#       - update any /etc/fstab lines regarding /boot/efi and replace them with the correct ones for the on disk vfat filesystem
#       - populate /boot/efi with sdbootutil install & sdbootutil mkinitrd (This should also generate the PCR bindings)
#   - Close the partition (close_partition)
#   - Generate a recovery key (generate_recoveryKey)
#   - Add recovery key to device and identify it as a systemd-recovery key (add_recoveryKey)
#   - Display the recovery key to the user (display_recoveryKey)
# It is expected the LUKS2 partition is already bound to the systems TPM2.0 chip (such as done via systemd-repart) and the TPM2 key is the only populated keyslot.

encrypt_dir=/var/lib/tik/encrypt
encrypt_pipe=/tmp/encryptpipe
if [ ! -d ${encrypt_dir} ]; then
    prun /usr/bin/mkdir -p ${encrypt_dir}
fi
if [ ! -p ${encrypt_pipe} ]; then
    mkfifo ${encrypt_pipe}
fi

crypt_progress() {
    log "[crypt_progress] Monitoring encryption progress"
    (tail -f ${encrypt_pipe}) | d --progress --title="Finalising Encryption" --auto-close --no-cancel --width=400
    rm ${encrypt_pipe}
    log "[crypt_progress] Encryption progress reached 100%"
}

find_crypt() {
    echo "# Finding encrypted partition" > ${encrypt_pipe}
    log "[find_crypt] finding encrypted partition"
    probe_partitions $TIK_INSTALL_DEVICE "crypto_LUKS"
    if [ -z "${probedpart}" ]; then
        error "encrypted partition not found"
    fi
    cryptpart=${probedpart}
    log "[find_crypt] found ${cryptpart}"
    echo "14" > ${encrypt_pipe}
}

find_esp() {
    echo "# Finding encrypted partition" > ${encrypt_pipe}
    log "[find_esp] finding ESP"
    probe_partitions $TIK_INSTALL_DEVICE "vfat"
    if [ -z "${probedpart}" ]; then
        error "esp partition not found"
    fi
    esppart=${probedpart}
    log "[find_esp] found ${esppart}"
    echo "28" > ${encrypt_pipe}
}

open_partition() {
    echo "# Opening ${cryptpart}" > ${encrypt_pipe}
    log "[open_partition] opening ${cryptpart} and mounting for chroot"
    prun /usr/sbin/cryptsetup luksOpen ${cryptpart} cr_root
    echo "35" > ${encrypt_pipe}
    prun /usr/bin/mkdir ${encrypt_dir}/mnt
    prun /usr/bin/mount -o compress=zstd:1 /dev/mapper/cr_root ${encrypt_dir}/mnt
    for i in proc dev sys 'sys/firmware/efi/efivars'; do
        prun /usr/bin/mount --bind "/$i" "${encrypt_dir}/mnt/$i"
    done
    prun /usr/bin/mount -o compress=zstd:1,subvol=/@/.snapshots /dev/mapper/cr_root ${encrypt_dir}/mnt/.snapshots
    prun /usr/bin/mount -o compress=zstd:1,subvol=/@/var /dev/mapper/cr_root ${encrypt_dir}/mnt/var
    etcmountcmd=$(cat ${encrypt_dir}/mnt/etc/fstab | grep "overlay /etc" | sed 's/\/sysroot\//${encrypt_dir}\/mnt\//g' | sed 's/\/work-etc.*/\/work-etc ${encrypt_dir}\/mnt\/etc\//' | sed 's/overlay \/etc overlay/\/usr\/bin\/mount -t overlay overlay -o/')
    eval prun "$etcmountcmd"
    prun /usr/bin/mount ${esppart} ${encrypt_dir}/mnt/boot/efi
    prun /usr/bin/mount -t tmpfs tmpfs "${encrypt_dir}/mnt/run"
    prun /usr/bin/mount -t tmpfs tmpfs "${encrypt_dir}/mnt/tmp"
    prun /usr/bin/mount -t securityfs securityfs "${encrypt_dir}/mnt/sys/kernel/security"
    echo "42" > ${encrypt_pipe}
}

finalise_system() {
    echo "# Finalising encryption" > ${encrypt_pipe}
    log "[finalise_system] configuring crypttab, PCR list, fstab and populating ${esppart}"
    cryptUUID=$(lsblk -n -r -d -o UUID ${cryptpart})
    # noauto as it's being mounted in the initrd as it's /
    echo "cr_root UUID=${cryptUUID} none x-initrd.attach,noauto,tpm2-device=auto" | prun tee ${encrypt_dir}/mnt/etc/crypttab
    # FIXME : Debug crypttab editing
    cat ${encrypt_dir}/mnt/etc/crypttab 1>&2
    # FIXME: Temporarily use PCR 7 only to test enrolment quicker
    echo "FDE_SEAL_PCR_LIST=7" | prun tee ${encrypt_dir}/mnt/etc/sysconfig/fde-tools
    #echo "FDE_SEAL_PCR_LIST=0,2,4,7,9" | prun tee ${encrypt_dir}/mnt/etc/sysconfig/fde-tools
    # FIXME : Debug fstab editing
    cat ${encrypt_dir}/mnt/etc/fstab 1>&2
    espUUID=$(lsblk -n -r -o UUID ${esppart})
    prun /usr/bin/gawk -v espUUID=$espUUID -i inplace '$2 == "/boot/efi" { $1 = "UUID="espUUID } { print $0 }' ${encrypt_dir}/mnt/etc/fstab
    # FIXME : Debug fstab editing
    cat ${encrypt_dir}/mnt/etc/fstab 1>&2
    # Populate ESP so we can set the contents as the boot target
    prun /usr/bin/chroot ${encrypt_dir}/mnt sdbootutil install
    echo "56" > ${encrypt_pipe}
    # Set the boot target
    set_boot_target
    # mkinitrd to input crypttab and regenerate PCRs
    prun /usr/bin/chroot ${encrypt_dir}/mnt sdbootutil mkinitrd
    echo "70" > ${encrypt_pipe}
}

close_partition() {
    echo "# Closing ${cryptpart}" > ${encrypt_pipe}
    log "[close_partition] unmounting and closing ${cryptpart}"
    for i in proc dev run tmp 'boot/efi' etc var '.snapshots' 'sys/kernel/security' 'sys/firmware/efi/efivars' sys; do
        prun /usr/bin/umount "${encrypt_dir}/mnt/$i"
    done
    prun /usr/bin/umount ${encrypt_dir}/mnt
    prun /usr/bin/rmdir ${encrypt_dir}/mnt
    prun /usr/sbin/cryptsetup luksClose cr_root
    echo "77" > ${encrypt_pipe}
}

generate_recoveryKey() {
    echo "# Generating recovery key" > ${encrypt_pipe}
    log "[generate_recoveryKey] generating recovery key"
    modhex=('c' 'b' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'n' 'r' 't' 'u' 'v')
    mapfile -t raw_key < <(hexdump -v --format '1/1 "%u\n"' -n 32 /dev/random)
    [ "${#raw_key[@]}" = 32 ]
    key=""
    for ((i=0;i<"${#raw_key[@]}";++i)); do
        [ "$i" -gt 0 ] && [ "$((i%4))" -eq 0 ] && key="$key-"
        c="${raw_key[i]}"
        key="$key${modhex[$((c>>4))]}${modhex[$((c&15))]}"
    done
    echo "84" > ${encrypt_pipe}
}

add_recoveryKey() {
    echo "# Adding recovery key to ${cryptpart}" > ${encrypt_pipe}
    log "[add_recoveryKey] adding recovery key to ${cryptpart}"
    prun /usr/sbin/cryptsetup luksAddKey --verbose --token-only --batch-mode --force-password "${cryptpart}" <<<"$key"
    echo '{"type":"systemd-recovery","keyslots":["1"]}' | prun /usr/sbin/cryptsetup token import "${cryptpart}"
    echo "100" > ${encrypt_pipe}
}

display_recoveryKey() {
    log "[display_recoveryKey] displaying recovery key"
    zenity --width=500 --height=500 --no-wrap --warning --title="Encryption Recovery Key" --text="A secret recovery key has been generated for your ${TIK_OS_NAME} installation:\n\n    <b><big>$key</big></b>\n\nPlease save this secret recovery key at a secure location\nIt may be used to regain access to your system if the other credentials have been lost or forgotten\nThe recovery key can be used in place of a password whenever authentication is requested\n\nYou may optionally scan the recovery key off screen:\n<span face='monospace'>$(qrencode $key -t UTF8i)</span>"
    log "[display_recoveryKey] recovery key dialogue dismissed"
}

crypt_progress &
find_crypt
find_esp
open_partition
finalise_system
close_partition
generate_recoveryKey
add_recoveryKey
display_recoveryKey
#!/bin/bash
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright 2023-2024 SUSE LLC
# SPDX-FileCopyrightText: Copyright 2023-2024 Richard Brown

# Define variables
# Style notes
# lowercase variables = internal, not expected to be defined by users
# uppercase variables = user facing, expected to be set by config

tik_log=~/.tik.log
tik_dir=/usr/lib/tik

# Read libraries
. ${tik_dir}/lib/tik-functions

# Start logging
exec 2> >(exec tee -i -a "${tik_log}" >&2)
log "[START] $0"

# Check for debug mode
if [[ $1 == "--debug" ]]; then
	debug=1
	prun() {
		log "[pkexec-noexec] $@"
	}
else
	prun() {
		log "[pkexec] $@"
		pkexec "$@"
	}
fi

# Read configuration files, /usr first, then /etc
. ${tik_dir}/config
. ${TIK_CUSTOM_DIR}/config

# Check essential paths exist
if [ ! -d "${TIK_IMG_DIR}" ]; then
	error "${TIK_IMG_DIR} does not exist"
fi

cleanup() {
	retval=$?
	log "[STOP][${retval}] $0"
	if [ "${retval}" != "0" ] && [ "${debug}" != "1" ]; then
		d --timeout 60 --warning --text="<b>Installation Failed:</b>\n\nSystem is shutting down"
		systemctl poweroff
	fi
	if [ "${retval}" == "0" ] && [ "${debug}" != "1" ]; then
		d --timeout 5 --info --text="<b>Installation Succeeded:</b>\n\nSystem is rebooting" && systemctl reboot
	fi
	d --timeout 5 --info --text="<b>Test Succeeded:</b>\n\nHave a nice day!"
}
trap cleanup EXIT

load_modules "pre"
load_modules "pre" "etc"

get_disk
get_img
dump_image "${TIK_INSTALL_IMAGE}" "${TIK_INSTALL_DEVICE}"

load_modules "post"
load_modules "post" "etc"


